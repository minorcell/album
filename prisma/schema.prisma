// Prisma schema for Studio Album application
// Using MySQL per project requirements
// When modifying this schema, run `pnpm prisma:generate` and `pnpm prisma:push`

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique
  password  String
  role      UserRole    @default(member)
  status    UserStatus  @default(pending)
  photos    Photo[]
  fileSetsCreated FileSet[] @relation("UserFileSetCreator")
  filesUploaded   File[]    @relation("UserFileCreator")
  createdAt DateTime    @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  visibility  CategoryVisibility @default(internal)
  photos      Photo[]
  shareLinks  ShareLink[]
  createdAt   DateTime @default(now())
}

model Photo {
  id           Int      @id @default(autoincrement())
  filename     String
  originalName String
  description  String?
  categoryId   Int
  uploaderId   Int
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploaderId], references: [id])
  createdAt    DateTime @default(now())
}

model ShareLink {
  id         Int       @id @default(autoincrement())
  categoryId Int
  token      String    @unique
  password   String?
  expiresAt  DateTime?
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
}

enum UserRole {
  admin
  member
}

enum UserStatus {
  pending
  active
  rejected
}

enum CategoryVisibility {
  private
  internal
  public
}

// === Cloud Space (Files) ===
// Simplified file management: FileSet -> File (flat structure, similar to Category -> Photo)

enum FileSetVisibility {
  private
  internal
  public
}

model FileSet {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  visibility  FileSetVisibility @default(internal)
  createdBy   Int
  creator     User              @relation("UserFileSetCreator", fields: [createdBy], references: [id])
  files       File[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([visibility])
}

model File {
  id           Int      @id @default(autoincrement())
  filename     String   // Generated unique filename (like photo filename)
  originalName String   // Original upload name
  description  String?
  mimeType     String
  size         Int
  filesetId    Int
  uploaderId   Int
  fileSet      FileSet  @relation(fields: [filesetId], references: [id], onDelete: Cascade)
  uploader     User     @relation("UserFileCreator", fields: [uploaderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([filesetId])
  @@index([uploaderId])
}
